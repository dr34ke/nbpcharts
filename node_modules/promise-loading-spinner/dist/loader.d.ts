interface LoaderConfig {
    delay?: number;
    closeDelay?: number;
    initDelay?: number;
    loaderElement?: HTMLElement | string;
    classActive?: string;
}
export default class Loader {
    private loaderPromises;
    private config;
    private el;
    private suppressOnInit;
    private timeout;
    private closingTimeout;
    constructor(cfg?: LoaderConfig);
    loader<T>(promise: Promise<T>): Promise<T>;
    wrapFunction<C, A extends any[], R>(fnc: (this: C, ...args: A) => Promise<R>): (this: C, ...args: A) => Promise<R>;
}
export {};
